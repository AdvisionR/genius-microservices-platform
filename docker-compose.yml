services:
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8889:8889"
    networks:
      - genius-net
    depends_on:
      config-server:
        condition: service_healthy
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar
        -Dotel.exporter.otlp.endpoint=otel-collector:4317
        -Dotel.exporter.otlp.protocol=grpc
        -Dotel.logs.exporter=none
        -Dotel.metrics.exporter=none
        -Dotel.resource.attributes=service.name=api-gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8889/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-server:
    container_name: discovery-server
    build:
      context: .
      dockerfile: discovery-server/Dockerfile
    ports:
      - "8761:8761"
    networks:
      - genius-net
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar
        -Dotel.exporter.otlp.endpoint=otel-collector:4317
        -Dotel.exporter.otlp.protocol=grpc
        -Dotel.logs.exporter=none
        -Dotel.metrics.exporter=none
        -Dotel.resource.attributes=service.name=discovery-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 12

  config-server:
    container_name: config-server
    build:
      context: .
      dockerfile: config-server/Dockerfile
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - GIT_KEY=${GIT_KEY}
      - JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar
        -Dotel.exporter.otlp.endpoint=otel-collector:4317
        -Dotel.exporter.otlp.protocol=grpc
        -Dotel.logs.exporter=none
        -Dotel.metrics.exporter=none
        -Dotel.resource.attributes=service.name=config-server
    networks:
      - genius-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 30s
      retries: 5
    restart: unless-stopped

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    depends_on:
      config-server:
        condition: service_healthy
      postgres-auth:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar
        -Dotel.exporter.otlp.endpoint=otel-collector:4317
        -Dotel.exporter.otlp.protocol=grpc
        -Dotel.logs.exporter=none
        -Dotel.metrics.exporter=none
        -Dotel.resource.attributes=service.name=auth-service
    ports:
      - "9090:9090"
    networks:
      - genius-net

  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: user-service/Dockerfile
    depends_on:
      config-server:
        condition: service_healthy
      postgres-user:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar
        -Dotel.exporter.otlp.endpoint=otel-collector:4317
        -Dotel.exporter.otlp.protocol=grpc
        -Dotel.logs.exporter=none
        -Dotel.metrics.exporter=none
        -Dotel.resource.attributes=service.name=user-service
    ports:
      - "9091:9091"
    networks:
      - genius-net

  postgres-auth:
    image: postgres:16-alpine
    container_name: postgres-auth
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "15432:5432"
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    networks:
      - genius-net

  postgres-user:
    image: postgres:16-alpine
    container_name: postgres-user
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "15433:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - genius-net

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9092:9090"
    networks:
      - genius-net

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - genius-net
    volumes:
      - grafana-data:/var/lib/grafana

  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14250:14250"
    networks:
      - genius-net

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.101.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - /opt/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"
      - "4318:4318"
    networks:
      - genius-net

networks:
  genius-net:
    driver: bridge

volumes:
  postgres-auth-data:
  postgres-user-data:
  grafana-data: